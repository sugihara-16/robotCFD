============================================================
FILE: system/controlDict
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     foamRun;

solver          incompressibleFluid;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.1;

deltaT          1e-6;
writeControl    adjustableRunTime;
writeInterval   0.0001;

////- For testing with moveMesh
//deltaT          0.01;
//writeControl    timeStep;
//writeInterval   1;

purgeWrite      0;
writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep  yes;

maxCo           0.5;

functions
{
    #includeFunc Q
    #include "surfaces"
    #include "forces"
}

// ************************************************************************* //


============================================================
FILE: system/fvSchemes
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
    grad(U)         cellLimited Gauss linear 1;
}

divSchemes
{
    default         none;
    div(phi,U)      Gauss linearUpwind grad(U);
    div(phi,k)      Gauss upwind;
    div(phi,epsilon) Gauss upwind;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear limited corrected 0.33;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         limited corrected 0.33;
}


// ************************************************************************* //


============================================================
FILE: system/fvSolution
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    p
    {
      // solver          GAMG;
      // smoother        DICGaussSeidel;
      // tolerance       1e-6;
      // relTol          0.01;
      // cacheAgglomeration no;
      // maxIter         50;

      solver GAMG;
      smoother DICGaussSeidel;
      tolerance 1e-6;
      relTol 0.02;               // 初期は0.05〜0.1で様子見
      cacheAgglomeration yes;
      nCellsInCoarsestLevel 100;  // 50〜100推奨
      agglomerator faceAreaPair;
      maxIter         50;
    }

    pFinal
    {
        $p;
        relTol          0;
    }
    "pcorr.*"
    {
        $p;
        tolerance       1e-2;
        relTol          0;
    }

    MeshPhi
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-2;
        relTol          0;
    }

    "(U|k|epsilon)"
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-6;
        relTol          0.1;
    }

    "(U|k|epsilon)Final"
    {
        $U;
        relTol          0;
    }
}

PIMPLE
{
    correctPhi          yes;
    correctMeshPhi      yes;
    nOuterCorrectors    1;
    nCorrectors         1;
    nNonOrthogonalCorrectors 1;
    pRefCell 0;
    pRefValue 0;
}

relaxationFactors
{
    "(U|k|epsilon).*"   1;
}

cache
{
    grad(U);
}

// ************************************************************************* //


============================================================
FILE: system/decomposeParDict
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      decomposeParDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

numberOfSubdomains 8;

// method          hierarchical;
method scotch;

// hierarchicalCoeffs
// {
//     n               (2 2 2);
//     order           xyz;
// }
scotchCoeffs {}

// ************************************************************************* //


============================================================
FILE: system/blockMeshDict
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
    (-0.3 -0.81 -0.3)
    ( 0.3 -0.81 -0.3)
    ( 0.3  0.21 -0.3)
    (-0.3  0.21 -0.3)
    (-0.3 -0.81  0.3)
    ( 0.3 -0.81  0.3)
    ( 0.3  0.21  0.3)
    (-0.3  0.21  0.3)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (12 20 12) simpleGrading (1 1 1)
);

boundary
(
    walls
    {
        type wall;
        faces
        (
            (2 6 5 1)
            (0 3 2 1)
            (0 4 7 3)
            (4 5 6 7)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (3 7 6 2)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (1 5 4 0)
        );
    }
);

// ************************************************************************* //


============================================================
FILE: system/snappyHexMeshDict
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    innerCylinder
    {
        type        triSurfaceMesh;
        file        "propeller-innerCylinder.obj";
        regions
        {
            innerCylinder
            {
                 name       innerCylinder;
            }
        }
    }
    middleCylinder
    {
        type        triSurfaceMesh;
        file        "propeller-middleCylinder.obj";
        regions
        {
            middleCylinder
            {
                 name       middleCylinder;
            }
        }
    }
    outerCylinder
    {
        type        triSurfaceMesh;
        file        "propeller-outerCylinder.obj";
        regions
        {
            outerCylinderWall
            {
                 name       outerCylinder;
            }
            outerCylinderInlet
            {
                 name       inlet;
            }
            outerCylinderOutlet
            {
                 name       outlet;
            }
        }
    }
    propeller
    {
        type        triSurfaceMesh;
        file        "propeller.obj";
        regions
        {
            propellerStem
            {
                 name       propellerStem;
            }
            propellerTip
            {
                 name       propellerTip;
            }
        }
    }

    duct
    {
        type  triSurfaceMesh;
        file  "duct.obj";
        regions
          {
            ductInner
              {
                name ductInner;
              }
            ductOuter
              {
                name ductOuter;
              }
          }
    }
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 100000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 2000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 0;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 2;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/geometry for now.
    features
    (
        {
            file        "propeller-innerCylinder.eMesh";
            level       4;
        }
        {
            file        "propeller-outerCylinder.eMesh";
            level       0;
        }
        {
            file        "propeller.eMesh";
            level       4;
        }

        {
          file "duct.eMesh";
          level 3;
        }
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        innerCylinder
        {
            level       (4 4);
            cellZone    innerCylinder;
            faceZone    innerCylinder;
            mode        inside;
        }
        outerCylinder
        {
            level       (0 0);
            regions
            {
                inlet
                {
                    level       (0 0);
                    patchInfo
                    {
                        type        patch;
                    }
                }
                outlet
                {
                    level       (0 0);
                    patchInfo
                    {
                        type        patch;
                    }
                }
            }
        }
        propeller
        {
            level       (4 4);
            regions
            {
                propellerTip
                {
                    level (4 5);
                }
            }
        }

        duct
          {
            level (3 4);
            regions
              {
                ductInner
                  {
                    level (4 5);
                    patchInfo {
                      type wall;
                    }
                  } 
                ductOuter
                  {
                    level (3 4);
                    patchInfo
                      {
                        type wall;
                      }
                  }
              }
          }
    }

    // Resolve sharp angles
    resolveFeatureAngle 30;


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        innerCylinder
        {
            mode    inside;
            level   4;
        }
        middleCylinder
        {
            mode    inside;
            level   3;
        }

        duct
          {
            mode   distance;
            levels ((0.002 6) (0.005 5) (0.010 4));
          }
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the insidePoint is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    insidePoint (0.01 -0.5 0.01);


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces false;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 4.0; // 1.0;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 300;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;

    // Feature snapping

        // Number of feature edge snapping iterations.
        // Leave out altogether to disable.
        nFeatureSnapIter 10;

        // Detect (geometric only) features by sampling the surface
        // (default=false).
        implicitFeatureSnap true;

        // Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap false;

        // Detect features between multiple surfaces
        // (only for explicitFeatureSnap, default = false)
        multiRegionFeatureSnap true;
}



// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;

    // Per final patch (so not geometry!) the layer information
    layers
    {
    }

    // Expansion factor for layer mesh
    expansionRatio 1.0;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness 0.3;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.1;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 3;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.
    minMedianAxisAngle 90;


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    //- Maximum non-orthogonality allowed. Set to 180 to disable.
    maxNonOrtho 65;

    //- Max skewness allowed. Set to <0 to disable.
    maxBoundarySkewness 20;
    maxInternalSkewness 4;

    //- Max concaveness allowed. Is angle (in degrees) below which concavity
    //  is allowed. 0 is straight face, <0 would be convex face.
    //  Set to 180 to disable.
    maxConcave 80;

    //- Minimum cell pyramid volume relative to min bounding box length^3
    //  Set to a fraction of the smallest cell volume expected.
    //  Set to very negative number (e.g. -1e30) to disable.
    minVol -1e30;

    //- Minimum quality of the tet formed by the face-centre
    //  and variable base point minimum decomposition triangles and
    //  the cell centre. This has to be a positive number for tracking
    //  to work. Set to very negative number (e.g. -1e30) to
    //  disable.
    //     <0 = inside out tet,
    //      0 = flat tet
    //      1 = regular tet
    minTetQuality -1; // 1e-30;

    //- Minimum face twist. Set to <-1 to disable. dot product of face normal
    //  and face centre triangles normal
    minTwist 0.01;

    //- Minimum normalised cell determinant
    //  1 = hex, <= 0 = folded or flattened illegal cell
    minDeterminant 0.001;

    //- minFaceWeight (0 -> 0.5)
    minFaceWeight 0.05;

    //- minVolRatio (0 -> 1)
    minVolRatio 0.01;

    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;

    //- Amount to scale back displacement at error points
    errorReduction 0.75;

    // Optional : some meshing phases allow usage of relaxed rules.
    // See e.g. addLayersControls::nRelaxedIter.
    relaxed
    {
        //- Maximum non-orthogonality allowed. Set to 180 to disable.
        maxNonOrtho 75;
    }
}



// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;


// ************************************************************************* //


============================================================
FILE: system/createBafflesDict
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      createBafflesDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

internalFacesOnly true;

baffles
{
    nonCouple
    {
        type        faceZone;
        zoneName    innerCylinder;

        patches
        {
            owner
            {
                name        nonCouple1;
                type        patch;
            }

            neighbour
            {
                name        nonCouple2;
                type        patch;
            }
        }
    }
}


// ************************************************************************* //


============================================================
FILE: system/forces
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/

propellerForces
{
    type          forces;

    libs          ("libforces.so");

    writeControl  timeStep;
    timeInterval  10;

    log           yes;

    patches       ("propeller.*");
    rho           rhoInf;     // Indicates incompressible
    log           true;
    rhoInf        1.225;          // Redundant for incompressible

    CofR          (0 0 0);    // Rotation around centre line of propeller
    pitchAxis     (0 1 0);
}

ductInnerForces
{
    type          forces;

    libs          ("libforces.so");

    writeControl  timeStep;
    timeInterval  10;

    log           yes;

    patches       ("ductInner");
    rho           rhoInf;     // Indicates incompressible
    log           true;
    rhoInf        1.225;          // Redundant for incompressible

    CofR          (0 0 0);    // Rotation around centre line of propeller
    pitchAxis     (0 1 0);
}

ductOuterForces
{
    type          forces;

    libs          ("libforces.so");

    writeControl  timeStep;
    timeInterval  10;

    log           yes;

    patches       ("ductOuter");
    rho           rhoInf;     // Indicates incompressible
    log           true;
    rhoInf        1.225;          // Redundant for incompressible

    CofR          (0 0 0);    // Rotation around centre line of propeller
    pitchAxis     (0 1 0);
}

totalForces
{
    type          forces;

    libs          ("libforces.so");

    writeControl  timeStep;
    timeInterval  10;

    log           yes;

    patches       ("propeller.*" "duct.*");
    rho           rhoInf;     // Indicates incompressible
    log           true;
    rhoInf        1.225;          // Redundant for incompressible

    CofR          (0 0 0);    // Rotation around centre line of propeller
    pitchAxis     (0 1 0);
}


// ************************************************************************* //


============================================================
FILE: system/surfaces
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/

surfaces
{
    type            surfaces;
    libs            ("libsampling.so");
    writeControl    writeTime;

    surfaceFormat   vtk;
    writeFormat     binary;
    fields          (p U Q);

    interpolationScheme cellPoint;

    surfaces
    (
        zNormal
        {
            type            cutPlane;
            planeType       pointAndNormal;
            point           (0 0 0);
            normal          (0 0 1);
            interpolate     true;
        }

        isoQ
        {
            type            isoSurface;
            isoField        Q;
            isoValue        1000;
            interpolate     true;
        }

        propeller
        {
            type            patch;
            patches         ("propeller.*");
            interpolate     true;
        }
    );
}


// ************************************************************************* //


============================================================
FILE: system/surfaceFeaturesDict
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      surfaceFeaturesDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

surfaces
(
    "propeller-innerCylinder.obj"
    "propeller-outerCylinder.obj"
    "propeller.obj"
    "duct.obj"
);

// Identify a feature when angle between faces < includedAngle
includedAngle   150;

trimFeatures
{
    // Remove features with fewer than the specified number of edges
    minElem         10;
}

// ************************************************************************* //


============================================================
FILE: Allrun
============================================================
#!/bin/sh
cd ${0%/*} || exit 1    # Run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Mesh if necessary
if ! cloneMesh ../../incompressibleVoF/propeller .
then
    ./Allmesh
else
    runApplication decomposePar -noFields
fi

# Copy the fields into the processor directories
runApplication -a decomposePar -fields -copyZero

# Run
runParallel $(getApplication)

# Reconstruct
runApplication reconstructPar

#------------------------------------------------------------------------------


============================================================
FILE: Allclean
============================================================
#!/bin/sh
cd ${0%/*} || exit 1    # Run from this directory

# Source tutorial clean functions
. $WM_PROJECT_DIR/bin/tools/CleanFunctions

# Remove surfaces
# rm -f constant/geometry/propeller*.obj.gz

# Remove post-processing fields
rm -f 0/Q

cleanCase
cleanExplicitFeatures

#------------------------------------------------------------------------------


============================================================
FILE: Allmesh
============================================================
#!/bin/sh
cd ${0%/*} || exit 1    # Run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Copy propeller surfaces from resources directory
# cp $FOAM_TUTORIALS/resources/geometry/propeller*.obj.gz constant/geometry/

# Mesh in parallel
runApplication blockMesh
runApplication surfaceFeatures
runApplication decomposePar -noFields
runParallel snappyHexMesh -overwrite

# Create the sliding patches
runParallel createBaffles -overwrite
runParallel splitBaffles -overwrite

# Renumber
runParallel renumberMesh -noFields -overwrite

# Create non-conformal couples
runParallel createNonConformalCouples -overwrite nonCouple1 nonCouple2

#------------------------------------------------------------------------------


============================================================
FILE: constant/momentumTransport
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      momentumTransport;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

simulationType  RAS;

RAS
{
    model           kEpsilon;

    turbulence      on;

    printCoeffs     on;
}


// ************************************************************************* //


============================================================
FILE: constant/physicalProperties
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      physicalProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

viscosityModel  constant;

nu              [0 2 -1 0 0 0 0] 1.5e-5;

// ************************************************************************* //


============================================================
FILE: constant/dynamicMeshDict
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      dynamicMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

mover
{
    type            motionSolver;

    libs            ("libfvMeshMovers.so" "libfvMotionSolvers.so");

    motionSolver    solidBody;

    cellZone        innerCylinder;

    solidBodyMotionFunction  rotatingMotion;

    origin      (0 0 0);
    axis        (0 1 0);

    rpm     table
      (
       (0      0)
       (0.06  -30000)
       );
}
// ************************************************************************* //


============================================================
FILE: constant/geometry/README
============================================================
Folder to house tri-surfaces

The Allrun script copies the surface from the $FOAM_TUTORIALS/resources/geometry
folder


============================================================
FILE: 0/U
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"

    inlet
    {
        type            fixedValue;
        value           uniform (0 -5 0);
    }

    outlet
    {
        type            inletOutlet;
        inletValue      $internalField;
        value           $internalField;
    }

    outerCylinder
    {
        type            noSlip;
    }

    "propeller.*"
    {
        type            movingWallVelocity;
        value           $internalField;
    }

    "duct.*"
      {
        type noSlip; 
      }

    nonCouple
    {
        type            movingWallSlipVelocity;
        value           $internalField;
    }
}


// ************************************************************************* //


============================================================
FILE: 0/U~
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"

    inlet
    {
        type            fixedValue;
        value           uniform (0 -5 0);
    }

    outlet
    {
        type            inletOutlet;
        inletValue      $internalField;
        value           $internalField;
    }

    outerCylinder
    {
        type            noSlip;
    }

    "propeller.*"
    {
        type            movingWallVelocity;
        value           $internalField;
    }

    nonCouple
    {
        type            movingWallSlipVelocity;
        value           $internalField;
    }
}


// ************************************************************************* //


============================================================
FILE: 0/epsilon
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    location    "0";
    object      epsilon;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 2 -3 0 0 0 0];

internalField   uniform 0.037;

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"

    inlet
    {
        type            fixedValue;
        value           $internalField;
    }

    outlet
    {
        type            inletOutlet;
        inletValue      $internalField;
        value           $internalField;
    }

    wall
    {
        type            epsilonWallFunction;
        value           $internalField;
    }

    nonCouple
    {
        type            zeroGradient;
    }
}


// ************************************************************************* //


============================================================
FILE: 0/k
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    location    "0";
    object      k;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 2 -2 0 0 0 0];

internalField   uniform 0.094;

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"

    inlet
    {
        type            fixedValue;
        value           $internalField;
    }

    outlet
    {
        type            inletOutlet;
        inletValue      $internalField;
        value           $internalField;
    }

    wall
    {
        type            kqRWallFunction;
        value           $internalField;
    }

    nonCouple
    {
        type            zeroGradient;
    }
}


// ************************************************************************* //


============================================================
FILE: 0/nut
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    location    "0";
    object      nut;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 2 -1 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"

    inlet
    {
        type            calculated;
        value           $internalField;
    }

    outlet
    {
        type            calculated;
        value           $internalField;
    }

    wall
    {
        type            nutkWallFunction;
        value           $internalField;
    }

    nonCouple
    {
        type            calculated;
        value           $internalField;
    }
}


// ************************************************************************* //


============================================================
FILE: 0/p
============================================================
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    location    "0";
    object      p;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 2 -2 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"

    inlet
    {
        type            zeroGradient;
    }

    outlet
    {
        type            fixedValue;
        value           $internalField;
    }

    wall
    {
        type            zeroGradient;
    }

    nonCouple
    {
        type            zeroGradient;
    }
}


// ************************************************************************* //


